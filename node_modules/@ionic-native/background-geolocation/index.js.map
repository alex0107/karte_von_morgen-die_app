{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/background-geolocation/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface BackgroundGeolocationResponse {\n  /**\n   * ID of location as stored in DB (or null)\n   */\n  locationId: number;\n\n  /**\n   * Service provider\n   */\n  serviceProvider: string;\n\n  /**\n   * true if location recorded as part of debug\n   */\n  debug: boolean;\n\n  /**\n   * UTC time of this fix, in milliseconds since January 1, 1970.\n   */\n  time: number;\n\n  /**\n   * latitude, in degrees.\n   */\n  latitude: number;\n\n  /**\n   * longitude, in degrees.\n   */\n  longitude: number;\n\n  /**\n   * estimated accuracy of this location, in meters.\n   */\n  accuracy: number;\n\n  /**\n   * speed if it is available, in meters/second over ground.\n   */\n  speed: number;\n\n  /**\n   * altitude if available, in meters above the WGS 84 reference ellipsoid.\n   */\n  altitude: number;\n\n  /**\n   * accuracy of the altitude if available.\n   */\n  altitudeAccuracy: number;\n\n  /**\n   * bearing, in degrees.\n   */\n  bearing: number;\n\n  /**\n   * A Coordinates object defining the current location\n   */\n  coords: Coordinates;\n\n  /**\n   * A timestamp representing the time at which the location was retrieved.\n   */\n  timestamp: number;\n}\n\nexport interface BackgroundGeolocationConfig {\n  /**\n   * Desired accuracy in meters. Possible values [0, 10, 100, 1000]. The lower\n   * the number, the more power devoted to GeoLocation resulting in higher\n   * accuracy readings. 1000 results in lowest power drain and least accurate\n   * readings. @see Apple docs (https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instp/CLLocationManager/desiredAccuracy)\n   */\n  desiredAccuracy: number;\n\n  /**\n   * Stationary radius in meters. When stopped, the minimum distance the device\n   * must move beyond the stationary location for aggressive background-tracking\n   * to engage.\n   */\n  stationaryRadius: number;\n\n  /**\n   * When enabled, the plugin will emit sounds for life-cycle events of\n   * background-geolocation! See debugging sounds table.\n   */\n  debug?: boolean;\n\n  /**\n   * The minimum distance (measured in meters) a device must move horizontally\n   * before an update event is generated. @see Apple docs. (https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html#//apple_ref/occ/instp/CLLocationManager/distanceFilter)\n   */\n  distanceFilter: number;\n\n  /**\n   * IOS, ANDROID ONLY\n   * Enable this in order to force a stop() when the application terminated\n   * (e.g. on iOS, double-tap home button, swipe away the app).o\n   *\n   * Defaults to true\n   */\n  stopOnTerminate?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * Start background service on device boot.\n   *\n   * Defaults to false\n   */\n  startOnBoot?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * If false location service will not be started in foreground and no notification will be shown.\n   *\n   * Defaults to true\n   */\n  startForeground?: boolean;\n\n  /**\n   * ANDROID ONLY\n   * When using BackgroundGeolocation.LocationProvider.ANDROID_DISTANCE_FILTER_PROVIDER:\n   * The minimum time interval between location updates in milliseconds.\n   * @see Android docs (http://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates(long,%20float,%20android.location.Criteria,%20android.app.PendingIntent))\n   * and the MS doc (http://msdn.microsoft.com/en-us/library/windows/apps/windows.devices.geolocation.geolocator.reportinterval)\n   * for more information\n   * When using BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER:\n   * Rate in milliseconds at which your app prefers to receive location updates.\n   * @see Android docs (https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#getInterval())\n   */\n  interval?: number;\n\n  /**\n   * ANDROID ONLY\n   * Custom notification title in the drawer.\n   */\n  notificationTitle?: string;\n\n  /**\n   * ANDROID ONLY\n   * Custom notification text in the drawer.\n   */\n  notificationText?: string;\n\n  /**\n   * ANDROID ONLY\n   * The accent color to use for notification. Eg. #4CAF50.\n   */\n  notificationIconColor?: string;\n\n  /**\n   * ANDROID ONLY\n   * The filename of a custom notification icon. See android quirks.\n   * NOTE: Only available for API Level >=21.\n   */\n  notificationIconLarge?: string;\n\n  /**\n   * ANDROID ONLY\n   * The filename of a custom notification icon. See android quirks.\n   * NOTE: Only available for API Level >=21.\n   */\n  notificationIconSmall?: string;\n\n  /**\n   * ANDROID ONLY\n   * Set location service provider @see wiki (https://github.com/mauron85/cordova-plugin-background-geolocation/wiki/Android-providers)\n   */\n  locationProvider?: number;\n\n  /**\n   * IOS ONLY\n   * [AutomotiveNavigation, OtherNavigation, Fitness, Other] Presumably,\n   * this affects iOS GPS algorithm. @see Apple docs for more information\n   * (https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/CLLocationManager/CLLocationManager.html#//apple_ref/occ/instp/CLLocationManager/activityType)\n   */\n  activityType?: string;\n\n  /**\n   * IOS ONLY\n   * Pauses location updates when app is paused\n   *\n   * Defaults to true\n   */\n  pauseLocationUpdates?: boolean;\n\n  /**\n   * Server url where to send HTTP POST with recorded locations\n   * @see https://github.com/mauron85/cordova-plugin-background-geolocation#http-locations-posting\n   */\n  url?: string;\n\n  /**\n   * Server url where to send fail to post locations\n   * @see https://github.com/mauron85/cordova-plugin-background-geolocation#http-locations-posting\n   */\n  syncUrl?: string;\n\n  /**\n   * Specifies how many previously failed locations will be sent to server at once\n   *\n   * Defaults to 100\n   */\n  syncThreshold?: number;\n\n  /**\n   * Optional HTTP headers sent along in HTTP request\n   */\n  httpHeaders?: any;\n\n  /**\n   * IOS ONLY\n   * Switch to less accurate significant changes and region monitory when in background (default)\n   *\n   * Defaults to 100\n   */\n  saveBatteryOnBackground?: boolean;\n\n  /**\n   * Limit maximum number of locations stored into db\n   *\n   * Defaults to 10000\n   */\n  maxLocations?: number;\n\n  /**\n   * ANDROID ONLY with BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER\n   *\n   * Fastest rate in milliseconds at which your app can handle location updates.\n   * @see Android docs (https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest.html#getFastestInterval())\n   */\n  fastestInterval?: number;\n\n  /**\n   * ANDROID ONLY with BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER\n   *\n   * Rate in milliseconds at which activity recognition occurs. Larger values will result in fewer activity detections while improving battery life.\n   */\n  activitiesInterval?: number;\n\n  /**\n   * ANDROID ONLY with BackgroundGeolocation.LocationProvider.ANDROID_ACTIVITY_PROVIDER\n   *\n   * stop() is forced, when the STILL activity is detected (default is true)\n   */\n  stopOnStillActivity?: boolean;\n}\n\n/**\n * @name Background Geolocation\n * @description\n * This plugin provides foreground and background geolocation with battery-saving \"circular region monitoring\" and \"stop detection\". For\n * more detail, please see https://github.com/mauron85/cordova-plugin-background-geolocation\n *\n * @usage\n *\n * BackgroundGeolocation must be called within app.ts and or before Geolocation. Otherwise the platform will not ask you for background tracking permission.\n *\n * ```typescript\n * import { BackgroundGeolocation, BackgroundGeolocationConfig, BackgroundGeolocationResponse } from '@ionic-native/background-geolocation';\n *\n * constructor(private backgroundGeolocation: BackgroundGeolocation) { }\n *\n * ...\n *\n * const config: BackgroundGeolocationConfig = {\n *             desiredAccuracy: 10,\n *             stationaryRadius: 20,\n *             distanceFilter: 30,\n *             debug: true, //  enable this hear sounds for background-geolocation life-cycle.\n *             stopOnTerminate: false, // enable this to clear background location settings when the app terminates\n *     };\n *\n * this.backgroundGeolocation.configure(config)\n *   .subscribe((location: BackgroundGeolocationResponse) => {\n *\n *     console.log(location);\n *\n *     // IMPORTANT:  You must execute the finish method here to inform the native plugin that you're finished,\n *     // and the background-task may be completed.  You must do this regardless if your HTTP request is successful or not.\n *     // IF YOU DON'T, ios will CRASH YOUR APP for spending too much time in the background.\n *     this.backgroundGeolocation.finish(); // FOR IOS ONLY\n *\n *   });\n *\n * // start recording location\n * this.backgroundGeolocation.start();\n *\n * // If you wish to turn OFF background-tracking, call the #stop method.\n * this.backgroundGeolocation.stop();\n *\n * ```\n * @interfaces\n * BackgroundGeolocationResponse\n * BackgroundGeolocationConfig\n */\n@Plugin({\n  pluginName: 'BackgroundGeolocation',\n  plugin: 'cordova-plugin-mauron85-background-geolocation',\n  pluginRef: 'backgroundGeolocation',\n  repo: 'https://github.com/mauron85/cordova-plugin-background-geolocation',\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class BackgroundGeolocation extends IonicNativePlugin {\n  /**\n   * Set location service provider @see https://github.com/mauron85/cordova-plugin-background-geolocation/wiki/Android-providers\n   *\n   * Possible values:\n   *  ANDROID_DISTANCE_FILTER_PROVIDER: 0,\n   *  ANDROID_ACTIVITY_PROVIDER: 1\n   *\n   * @enum {number}\n   */\n  LocationProvider: any = {\n    ANDROID_DISTANCE_FILTER_PROVIDER: 0,\n    ANDROID_ACTIVITY_PROVIDER: 1\n  };\n\n  /**\n   * Desired accuracy in meters. Possible values [0, 10, 100, 1000].\n   * The lower the number, the more power devoted to GeoLocation resulting in higher accuracy readings.\n   * 1000 results in lowest power drain and least accurate readings.\n   *\n   * Possible values:\n   *  HIGH: 0\n   *  MEDIUM: 10\n   *  LOW: 100\n   *  PASSIVE: 1000\n   *\n   * enum {number}\n   */\n  Accuracy: any = {\n    HIGH: 0,\n    MEDIUM: 10,\n    LOW: 100,\n    PASSIVE: 1000\n  };\n\n  /**\n   * Used in the switchMode function\n   *\n   * Possible values:\n   *  BACKGROUND: 0\n   *  FOREGROUND: 1\n   *\n   * @enum {number}\n   */\n  Mode: any = {\n    BACKGROUND: 0,\n    FOREGROUND: 1\n  };\n\n  /**\n   * Configure the plugin.\n   *\n   * @param options {BackgroundGeolocationConfig} options An object of type Config\n   * @return {Observable<BackgroundGeolocationResponse>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    observable: true\n  })\n  configure(\n    options: BackgroundGeolocationConfig\n  ): Observable<BackgroundGeolocationResponse> {\n    return;\n  }\n\n  /**\n   * Turn ON the background-geolocation system.\n   * The user will be tracked whenever they suspend the app.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  start(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Turn OFF background-tracking\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stop(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Inform the native plugin that you're finished, the background-task may be completed\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  finish(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Force the plugin to enter \"moving\" or \"stationary\" state\n   * @param isMoving {boolean}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  changePace(isMoving: boolean): Promise<any> {\n    return;\n  }\n\n  /**\n   * Setup configuration\n   * @param options {BackgroundGeolocationConfig}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  setConfig(options: BackgroundGeolocationConfig): Promise<any> {\n    return;\n  }\n\n  /**\n   * Returns current stationaryLocation if available. null if not\n   * @returns {Promise<Location>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  getStationaryLocation(): Promise<BackgroundGeolocationResponse> {\n    return;\n  }\n\n  /**\n   * Add a stationary-region listener. Whenever the devices enters \"stationary-mode\",\n   * your #success callback will be executed with #location param containing #radius of region\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  onStationary(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Check if location is enabled on the device\n   * @returns {Promise<number>} Returns a promise with int argument that takes values 0, 1 (true).\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  isLocationEnabled(): Promise<number> {\n    return;\n  }\n\n  /**\n   * Display app settings to change permissions\n   */\n  @Cordova({ sync: true })\n  showAppSettings(): void {}\n\n  /**\n   * Display device location settings\n   */\n  @Cordova({ sync: true })\n  showLocationSettings(): void {}\n\n  /**\n   * Method can be used to detect user changes in location services settings.\n   * If user enable or disable location services then success callback will be executed.\n   * In case or error (SettingNotFoundException) fail callback will be executed.\n   * @returns {Observable<number>}\n   */\n  @Cordova({\n    platforms: ['Android'],\n    observable: true\n  })\n  watchLocationMode(): Observable<number> {\n    return;\n  }\n\n  /**\n   * Stop watching for location mode changes.\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  stopWatchingLocationMode(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Method will return all stored locations.\n   * Locations are stored when:\n   *  - config.stopOnTerminate is false and main activity was killed\n   *    by the system\n   *  or\n   *  - option.debug is true\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  getLocations(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Method will return locations, which has not been yet posted to server. NOTE: Locations does contain locationId.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  getValidLocations(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Delete stored location by given locationId.\n   * @param locationId {number}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  deleteLocation(locationId: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Delete all stored locations.\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  deleteAllLocations(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Normally plugin will handle switching between BACKGROUND and FOREGROUND mode itself.\n   * Calling switchMode you can override plugin behavior and force plugin to switch into other mode.\n   *\n   * In FOREGROUND mode plugin uses iOS local manager to receive locations and behavior is affected by option.desiredAccuracy and option.distanceFilter.\n   * In BACKGROUND mode plugin uses significant changes and region monitoring to receive locations and uses option.stationaryRadius only.\n   *\n   * BackgroundGeolocation.Mode.FOREGROUND\n   * BackgroundGeolocation.Mode.BACKGROUND\n   *\n   * @param modeId {number}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  switchMode(modeId: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Return all logged events. Useful for plugin debugging. Parameter limit limits number of returned entries.\n   * @see https://github.com/mauron85/cordova-plugin-background-geolocation/tree/v2.2.1#debugging for more information.\n   *\n   * @param limit {number} Limits the number of entries\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  getLogEntries(limit: number): Promise<any> {\n    return;\n  }\n}\n"]}