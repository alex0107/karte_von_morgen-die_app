{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/network/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EACL,OAAO,EACP,YAAY,EACZ,eAAe,EACf,iBAAiB,EACjB,MAAM,EACP,MAAM,oBAAoB,CAAC;AAC5B,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAI9C,MAAM,CAAN,IAAY,UASX;AATD,WAAY,UAAU;IACpB,iDAAW,CAAA;IACX,mDAAQ,CAAA;IACR,2CAAI,CAAA;IACJ,iDAAO,CAAA;IACP,iDAAO,CAAA;IACP,iDAAO,CAAA;IACP,2CAAI,CAAA;IACJ,2CAAI,CAAA;GARM,UAAU,KAAV,UAAU,QASrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAoD4B,2BAAiB;;;;;;2BAK/B;YACX,OAAO,EAAE,SAAS;YAClB,QAAQ,EAAE,UAAU;YACpB,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,IAAI;YACb,IAAI,EAAE,UAAU;YAChB,IAAI,EAAE,MAAM;SACb;;;IAcD;;;OAGG;;;;;IAEH,0BAAQ;;;;;QACN,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;KACrD;IAED;;;OAGG;;;;;IAMH,8BAAY;;;;;QACV,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAMH,2BAAS;;;;;QACP,MAAM,CAAC;KACR;;gBA9DF,UAAU;;;QAqBR,eAAe;;;;QAMf,eAAe;;;;QAMf,YAAY,EAAE;;;wCACH,UAAU;2CAErB;;QAMA,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,SAAS;YAChB,OAAO,EAAE,QAAQ;SAClB,CAAC;;;wCACc,UAAU;+CAEzB;;QAMA,OAAO,CAAC;YACP,eAAe,EAAE,IAAI;YACrB,KAAK,EAAE,QAAQ;YACf,OAAO,EAAE,QAAQ;SAClB,CAAC;;;wCACW,UAAU;4CAEtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA7DU,OAAO;QARnB,MAAM,CAAC;YACN,UAAU,EAAE,SAAS;YACrB,MAAM,EAAE,oCAAoC;YAC5C,SAAS,EAAE,sBAAsB;YACjC,IAAI,EAAE,8DAA8D;YACpE,SAAS,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACtE,CAAC;OAEW,OAAO,EA8DnB;kBAxID;EA0E6B,iBAAiB;SAAjC,OAAO","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Cordova,\n  CordovaCheck,\n  CordovaProperty,\n  IonicNativePlugin,\n  Plugin\n} from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\nimport { merge } from 'rxjs/observable/merge';\n\ndeclare const navigator: any;\n\nexport enum Connection {\n  UNKNOWN = 0,\n  ETHERNET,\n  WIFI,\n  CELL_2G,\n  CELL_3G ,\n  CELL_4G,\n  CELL,\n  NONE\n}\n\n/**\n * @name Network\n * @description\n * Requires Cordova plugin: cordova-plugin-network-information. For more info, please see the [Network plugin docs](https://github.com/apache/cordova-plugin-network-information).\n *\n * @usage\n * ```typescript\n * import { Network } from '@ionic-native/network';\n *\n * constructor(private network: Network) { }\n *\n * ...\n *\n * // watch network for a disconnect\n * let disconnectSubscription = this.network.onDisconnect().subscribe(() => {\n *   console.log('network was disconnected :-(');\n * });\n *\n * // stop disconnect watch\n * disconnectSubscription.unsubscribe();\n *\n *\n * // watch network for a connection\n * let connectSubscription = this.network.onConnect().subscribe(() => {\n *   console.log('network connected!');\n *   // We just got a connection but we need to wait briefly\n *    // before we determine the connection type. Might need to wait.\n *   // prior to doing any api requests as well.\n *   setTimeout(() => {\n *     if (this.network.type === 'wifi') {\n *       console.log('we got a wifi connection, woohoo!');\n *     }\n *   }, 3000);\n * });\n *\n * // stop connect watch\n * connectSubscription.unsubscribe();\n *\n * ```\n * @advanced\n * The `type` property will return one of the following connection types: `unknown`, `ethernet`, `wifi`, `2g`, `3g`, `4g`, `cellular`, `none`\n */\n@Plugin({\n  pluginName: 'Network',\n  plugin: 'cordova-plugin-network-information',\n  pluginRef: 'navigator.connection',\n  repo: 'https://github.com/apache/cordova-plugin-network-information',\n  platforms: ['Amazon Fire OS', 'Android', 'Browser', 'iOS', 'Windows']\n})\n@Injectable()\nexport class Network extends IonicNativePlugin {\n\n  /**\n   * Constants for possible connection types\n   */\n  Connection = {\n    UNKNOWN: 'unknown',\n    ETHERNET: 'ethernet',\n    WIFI: 'wifi',\n    CELL_2G: '2g',\n    CELL_3G: '3g',\n    CELL_4G: '4g',\n    CELL: 'cellular',\n    NONE: 'none'\n  };\n\n  /**\n   * Connection type\n   * @return {string}\n   */\n  @CordovaProperty type: string;\n\n  /**\n   * Downlink Max Speed\n   * @return {string}\n   */\n  @CordovaProperty downlinkMax: string;\n\n  /**\n   * Returns an observable to watch connection changes\n   * @return {Observable<any>}\n   */\n  @CordovaCheck()\n  onchange(): Observable<any> {\n    return merge(this.onConnect(), this.onDisconnect());\n  }\n\n  /**\n   * Get notified when the device goes offline\n   * @returns {Observable<any>} Returns an observable.\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'offline',\n    element: document\n  })\n  onDisconnect(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Get notified when the device goes online\n   * @returns {Observable<any>} Returns an observable.\n   */\n  @Cordova({\n    eventObservable: true,\n    event: 'online',\n    element: document\n  })\n  onConnect(): Observable<any> {\n    return;\n  }\n}\n"]}