{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/launch-navigator/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface PromptsOptions {\n\n  /**\n   * a function to pass the user's decision whether to remember their choice of app.\n   * This will be passed a single boolean value indicating the user's decision.\n   * @param rememberChoice\n   */\n  callback?: (rememberChoice: boolean) => void;\n\n  /**\n   * text to display in the native prompt header asking user whether to remember their choice.\n   * Defaults to \"Remember your choice?\" if not specified.\n   */\n  headerText?: string;\n\n  /**\n   * text to display in the native prompt body asking user whether to remember their choice.\n   * Defaults to \"Use the same app for navigating next time?\" if not specified.\n   */\n  bodyText?: string;\n\n\n  /**\n   * text to display for the Yes button.\n   * Defaults to \"Yes\" if not specified.\n   */\n  yesButtonText?: string;\n\n  /**\n   * text to display for the No button.\n   * Defaults to \"No\" if not specified.\n   */\n  noButtonText?: string;\n}\n\nexport interface RememberChoiceOptions {\n\n  /**\n   * whether to remember user choice of app for next time, instead of asking again for user choice.\n   * `\"prompt\"` - Prompt user to decide whether to remember choice.\n   *  - Default value if unspecified.\n   *  - If `promptFn` is defined, this will be used for user confirmation.\n   *  - Otherwise (by default), a native dialog will be displayed to ask user.\n   * `false` - Do not remember user choice.\n   * `true` - Remember user choice.\n   */\n  enabled?: boolean | string;\n\n\n  /**\n   * a function which asks the user whether to remember their choice of app.\n   * If this is defined, then the default dialog prompt will not be shown, allowing for a custom UI for asking the user.\n   * This will be passed a callback function which should be invoked with a single boolean argument which indicates the user's decision to remember their choice.\n   * @param callback\n   */\n  promptFn?: (callback: (rememberChoice: boolean) => void) => void;\n\n  /**\n   * options related to the default dialog prompt used to ask the user whether to remember their choice of app.\n   */\n  prompt?: PromptsOptions;\n}\n\nexport interface AppSelectionOptions {\n  /**\n   * text to display in the native picker which enables user to select which navigation app to launch.\n   * Defaults to \"Select app for navigation\" if not specified.\n   */\n  dialogHeaderText?: string;\n\n  /**\n   * text to display for the cancel button in the native picker which enables user to select which navigation app to launch.\n   * Defaults to \"Cancel\" if not specified.\n   */\n  cancelButtonText?: string;\n\n  /**\n   * List of apps, defined as `launchnavigator.APP` constants, which should be displayed in the picker if the app is available.\n   * This can be used to restrict which apps are displayed, even if they are installed.\n   * By default, all available apps will be displayed.\n   */\n  list?: string[];\n\n  /**\n   * Callback to invoke when the user selects an app in the native picker.\n   * A single string argument is passed which is the app what was selected defined as a `launchnavigator.APP` constant.\n   */\n  callback?: (app: string) => void;\n\n  /**\n   * (Android only) native picker theme. Specify using `actionsheet.ANDROID_THEMES` constants.\n   * Default `actionsheet.ANDROID_THEMES.THEME_HOLO_LIGHT`\n   */\n  androidTheme?: number;\n\n  /**\n   * options related to whether to remember user choice of app for next time, instead of asking again for user choice.\n   */\n  rememberChoice?: RememberChoiceOptions;\n}\n\nexport interface LaunchNavigatorOptions {\n\n  /**\n   * A callback to invoke when the navigation app is successfully launched.\n   */\n  successCallback?: Function;\n\n  /**\n   * A callback to invoke if an error is encountered while launching the app.\n   * A single string argument containing the error message will be passed in.\n   */\n  errorCallback?: (error: string) => void;\n\n  /**\n   * name of the navigation app to use for directions.\n   * Specify using launchnavigator.APP constants.\n   * e.g. `launchnavigator.APP.GOOGLE_MAPS`.\n   * If not specified, defaults to User Selection.\n   */\n  app?: string;\n\n  /**\n   * nickname to display in app for destination. e.g. \"Bob's House\".\n   */\n  destinationName?: string;\n\n  /**\n   * Start point of the navigation.\n   * If not specified, the current device location will be used.\n   * Either:\n   *  - a {string} containing the address. e.g. \"Buckingham Palace, London\"\n   *  - a {string} containing a latitude/longitude coordinate. e.g. \"50.1. -4.0\"\n   *  - an {array}, where the first element is the latitude and the second element is a longitude, as decimal numbers. e.g. [50.1, -4.0]\n   */\n  start?: string | number[];\n\n  /**\n   * nickname to display in app for start . e.g. \"My House\".\n   */\n  startName?: string;\n\n  /**\n   * Transportation mode for navigation: \"driving\", \"walking\" or \"transit\". Defaults to \"driving\" if not specified.\n   */\n  transportMode?: string;\n\n  /**\n   * If true, debug log output will be generated by the plugin. Defaults to false.\n   */\n  enableDebug?: boolean;\n\n  /**\n   * a key/value map of extra app-specific parameters. For example, to tell Google Maps on Android to display Satellite view in \"maps\" launch mode: `{\"t\": \"k\"}`\n   */\n  extras?: any;\n\n  /**\n   * (Android only) mode in which to open Google Maps app.\n   * `launchnavigator.LAUNCH_MODE.MAPS` or `launchnavigator.LAUNCH_MODE.TURN_BY_TURN`\n   * Defaults to `launchnavigator.LAUNCH_MODE.MAPS` if not specified.\n   */\n  launchModeGoogleMaps?: string;\n\n  /**\n   * (iOS only) method to use to open Apple Maps app.\n   * `launchnavigator.LAUNCH_MODE.URI_SCHEME` or `launchnavigator.LAUNCH_MODE.MAPKIT`\n   * Defaults to `launchnavigator.LAUNCH_MODE.URI_SCHEME` if not specified.\n   */\n  launchModeAppleMaps?: string;\n\n\n  /**\n   * If true, and input location type(s) doesn't match those required by the app, use geocoding to obtain the address/coords as required. Defaults to true.\n   */\n  enableGeolocation?: boolean;\n\n  /**\n   * options related to the default native actionsheet picker which enables user to select which navigation app to launch if `app` is not specified.\n   */\n  appSelection?: AppSelectionOptions;\n}\n\nexport interface UserChoice {\n\n  /**\n   * Indicates whether a user choice exists for a preferred navigator app.\n   * @param callback - function to pass result to: will receive a boolean argument.\n   */\n  exists: (callback: (exists: boolean) => void) => void;\n\n  /**\n   * Returns current user choice of preferred navigator app.\n   * @param callback - function to pass result to: will receive a string argument indicating the app, which is a constant in `launchnavigator.APP`.\n   */\n  get: (callback: (app: string) => void) => void;\n\n  /**\n   * Sets the current user choice of preferred navigator app.\n   * @param app - app to set as preferred choice as a constant in `launchnavigator.APP`.\n   * @param callback - function to call once operation is complete.\n   */\n  set: (app: string, callback: () => void) => void;\n\n  /**\n   * Clears the current user choice of preferred navigator app.\n   * @param callback - function to call once operation is complete.\n   */\n  clear: (callback: () => void) => void;\n}\n\nexport interface UserPrompted {\n  /**\n   * Indicates whether user has already been prompted whether to remember their choice a preferred navigator app.\n   * @param callback - function to pass result to: will receive a boolean argument.\n   */\n  get: (callback: (exists: boolean) => void) => void;\n\n  /**\n   * Sets flag indicating user has already been prompted whether to remember their choice a preferred navigator app.\n   * @param callback - function to call once operation is complete.\n   */\n  set: (callback: () => void) => void;\n\n  /**\n   * Clears flag which indicates if user has already been prompted whether to remember their choice a preferred navigator app.\n   * @param callback - function to call once operation is complete.\n   */\n  clear: (callback: () => void) => void;\n}\n\nexport interface AppSelection {\n  userChoice: UserChoice;\n  userPrompted: UserPrompted;\n}\n\n/**\n * @name Launch Navigator\n * @description\n * Requires Cordova plugin: uk.co.workingedge.phonegap.plugin.launchnavigator. For more info, please see the [LaunchNavigator plugin docs](https://github.com/dpa99c/phonegap-launch-navigator).\n *\n * @usage\n * Please refer to the plugin's repo for detailed usage. This docs page only explains the Native wrapper.\n *\n * ```typescript\n * import { LaunchNavigator, LaunchNavigatorOptions } from '@ionic-native/launch-navigator';\n *\n * constructor(private launchNavigator: LaunchNavigator) { }\n *\n * ...\n *\n * let options: LaunchNavigatorOptions = {\n *   start: 'London, ON',\n *   app: LaunchNavigator.APPS.UBER\n * };\n *\n * this.launchNavigator.navigate('Toronto, ON', options)\n *   .then(\n *     success => console.log('Launched navigator'),\n *     error => console.log('Error launching navigator', error)\n *   );\n * ```\n * @interfaces\n * LaunchNavigatorOptions\n * PromptsOptions\n * RememberChoiceOptions\n * AppSelectionOptions\n * UserChoice\n * UserPrompted\n * AppSelection\n */\n@Plugin({\n  pluginName: 'LaunchNavigator',\n  plugin: 'uk.co.workingedge.phonegap.plugin.launchnavigator',\n  pluginRef: 'launchnavigator',\n  repo: 'https://github.com/dpa99c/phonegap-launch-navigator',\n  platforms: ['Android', 'iOS', 'Windows', 'Windows Phone 8']\n})\n@Injectable()\nexport class LaunchNavigator extends IonicNativePlugin {\n\n  APP: any = {\n    USER_SELECT: 'user_select',\n    APPLE_MAPS: 'apple_maps',\n    GOOGLE_MAPS: 'google_maps',\n    WAZE: 'waze',\n    CITYMAPPER: 'citymapper',\n    NAVIGON: 'navigon',\n    TRANSIT_APP: 'transit_app',\n    YANDEX: 'yandex',\n    UBER: 'uber',\n    TOMTOM: 'tomtom',\n    BING_MAPS: 'bing_maps',\n    SYGIC: 'sygic',\n    HERE_MAPS: 'here_maps',\n    MOOVIT: 'moovit'\n  };\n\n  TRANSPORT_MODE: any = {\n    DRIVING: 'driving',\n    WALKING: 'walking',\n    BICYCLING: 'bicycling',\n    TRANSIT: 'transit'\n  };\n\n  /**\n   * Launches navigator app\n   * @param destination {string|number[]} Location name or coordinates (as string or array)\n   * @param options {LaunchNavigatorOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    successIndex: 2,\n    errorIndex: 3\n  })\n  navigate(destination: string | number[], options?: LaunchNavigatorOptions): Promise<any> { return; }\n\n  /**\n   * Determines if the given app is installed and available on the current device.\n   * @param app {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  isAppAvailable(app: string): Promise<any> { return; }\n\n  /**\n   * Returns a list indicating which apps are installed and available on the current device.\n   * @returns {Promise<string[]>}\n   */\n  @Cordova()\n  availableApps(): Promise<string[]> { return; }\n\n  /**\n   * Returns the display name of the specified app.\n   * @param app {string}\n   * @returns {string}\n   */\n  @Cordova({ sync: true })\n  getAppDisplayName(app: string): string { return; }\n\n  /**\n   * Returns list of supported apps on a given platform.\n   * @param platform {string}\n   * @returns {string[]}\n   */\n  @Cordova({ sync: true })\n  getAppsForPlatform(platform: string): string[] { return; }\n\n  /**\n   * Indicates if an app on a given platform supports specification of transport mode.\n   * @param app {string} specified as a string, you can use one of the constants, e.g `LaunchNavigator.APP.GOOGLE_MAPS`\n   * @param platform {string}\n   * @returns {boolean}\n   */\n  @Cordova({ sync: true })\n  supportsTransportMode(app: string, platform: string): boolean { return; }\n\n  /**\n   * Returns the list of transport modes supported by an app on a given platform.\n   * @param app {string}\n   * @param platform {string}\n   * @returns {string[]}\n   */\n  @Cordova({ sync: true })\n  getTransportModes(app: string, platform: string): string[] { return; }\n\n  /**\n   * @param app {string}\n   * @param platform {string}\n   * @returns {boolean}\n   */\n  @Cordova({ sync: true })\n  supportsDestName(app: string, platform: string): boolean { return; }\n\n  /**\n   * Indicates if an app on a given platform supports specification of start location.\n   * @param app {string}\n   * @param platform {string}\n   * @returns {boolean}\n   */\n  @Cordova({ sync: true })\n  supportsStart(app: string, platform: string): boolean { return; }\n\n  /**\n   * @param app {string}\n   * @param platform {string}\n   * @returns {boolean}\n   */\n  @Cordova({ sync: true })\n  supportsStartName(app: string, platform: string): boolean { return; }\n\n  /**\n   * Indicates if an app on a given platform supports specification of launch mode.\n   * Note that currently only Google Maps on Android does.\n   * @param app {string}\n   * @param platform {string}\n   * @returns {boolean}\n   */\n  @Cordova({ sync: true })\n  supportsLaunchMode(app: string, platform: string): boolean { return; }\n\n  /**\n   * @param destination {string | number[]}\n   * @param options {LaunchNavigatorOptions}\n   */\n  @Cordova({ sync: true })\n  userSelect(destination: string | number[], options: LaunchNavigatorOptions): void {}\n\n  appSelection: AppSelection;\n}\n"]}