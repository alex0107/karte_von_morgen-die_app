{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/file-transfer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EACL,eAAe,EACf,aAAa,EACb,iBAAiB,EACjB,MAAM,EACN,iBAAiB,EAClB,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyLM,gCAAiB;;;;;;;;;;;;;sCAWzB;YACtB,kBAAkB,EAAE,CAAC;YACrB,eAAe,EAAE,CAAC;YAClB,cAAc,EAAE,CAAC;YACjB,SAAS,EAAE,CAAC;YACZ,gBAAgB,EAAE,CAAC;SACpB;;;IAED;;;OAGG;;;;;IACH,6BAAM;;;;IAAN;QACE,MAAM,CAAC,IAAI,kBAAkB,EAAE,CAAC;KACjC;;gBA1BF,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IACE,YAAY;QAhBxB,MAAM,CAAC;YACN,UAAU,EAAE,cAAc;YAC1B,MAAM,EAAE,8BAA8B;YACtC,SAAS,EAAE,cAAc;YACzB,IAAI,EAAE,wDAAwD;YAC9D,SAAS,EAAE;gBACT,gBAAgB;gBAChB,SAAS;gBACT,SAAS;gBACT,KAAK;gBACL,QAAQ;gBACR,SAAS;gBACT,eAAe;aAChB;SACF,CAAC;OAEW,YAAY,EA0BxB;uBA1ND;EAgMkC,iBAAiB;SAAtC,YAAY;;;;;IAsCvB;QACE,EAAE,CAAC,CACD,iBAAiB,CACf,YAAY,CAAC,YAAY,EAAE,EAC3B,IAAI,EACJ,YAAY,CAAC,aAAa,EAAE,CAC7B,KAAK,IACR,CAAC,CAAC,CAAC;YACD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC;SACzD;KACF;IAED;;;;;;;;OAQG;;;;;;;;;;IAKH,mCAAM;;;;;;;;;cACJ,OAAe,EACf,GAAW,EACX,OAA2B,EAC3B,aAAuB;QAEvB,MAAM,CAAC;KACR;IAED;;;;;;;;OAQG;;;;;;;;;;IAKH,qCAAQ;;;;;;;;;cACN,MAAc,EACd,MAAc,EACd,aAAuB,EACvB,OAA8B;QAE9B,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,uCAAU;;;;cAAC,QAAuC;QAChD,IAAI,CAAC,eAAe,CAAC,UAAU,GAAG,QAAQ,CAAC;KAC5C;IAED;;;OAGG;;;;;IAIH,kCAAK;;;;mBAAW;;QAnDf,eAAe,CAAC;YACf,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;oDAQD;;QAWA,eAAe,CAAC;YACf,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;sDAQD;;QAMA,aAAa,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;wDAG7B;;QAMA,eAAe,CAAC;YACf,IAAI,EAAE,IAAI;SACX,CAAC;;;;mDACc;;;;IA3EL,kBAAkB;QAJ9B,MAAM,CAAC;YACN,MAAM,EAAE,8BAA8B;YACtC,UAAU,EAAE,cAAc;SAC3B,CAAC;;OACW,kBAAkB,EA4E9B;6BA/SD;;SAmOa,kBAAkB","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  CordovaInstance,\n  InstanceCheck,\n  IonicNativePlugin,\n  Plugin,\n  checkAvailability\n} from '@ionic-native/core';\n\nexport interface FileUploadOptions {\n  /**\n   * The name of the form element.\n   * Defaults to 'file'.\n   */\n  fileKey?: string;\n\n  /**\n   * The file name to use when saving the file on the server.\n   * Defaults to 'image.jpg'.\n   */\n  fileName?: string;\n\n  /**\n   * The HTTP method to use - either PUT or POST.\n   * Defaults to POST.\n   */\n  httpMethod?: string;\n\n  /**\n   * The mime type of the data to upload.\n   * Defaults to image/jpeg.\n   */\n  mimeType?: string;\n\n  /**\n   * A set of optional key/value pairs to pass in the HTTP request.\n   */\n  params?: { [s: string]: any };\n\n  /**\n   * Whether to upload the data in chunked streaming mode.\n   * Defaults to true.\n   */\n  chunkedMode?: boolean;\n\n  /**\n   * A map of header name/header values. Use an array to specify more\n   * than one value. On iOS, FireOS, and Android, if a header named\n   * Content-Type is present, multipart form data will NOT be used.\n   */\n  headers?: { [s: string]: any };\n}\n\nexport interface FileUploadResult {\n  /**\n   * The number of bytes sent to the server as part of the upload.\n   */\n  bytesSent: number;\n\n  /**\n   * The HTTP response code returned by the server.\n   */\n  responseCode: number;\n\n  /**\n   * The HTTP response returned by the server.\n   */\n  response: string;\n\n  /**\n   * The HTTP response headers by the server.\n   */\n  headers: { [s: string]: any };\n}\n\nexport interface FileTransferError {\n  /**\n   * One of the predefined error codes listed below.\n   */\n  code: number;\n\n  /**\n   * URL to the source.\n   */\n  source: string;\n\n  /**\n   * URL to the target.\n   */\n  target: string;\n\n  /**\n   * HTTP status code. This attribute is only available when a response\n   * code is received from the HTTP connection.\n   */\n  http_status: number;\n\n  /**\n   * Response body. This attribute is only available when a response is received from the HTTP connection.\n   */\n  body: string;\n\n  /**\n   * Either e.getMessage or e.toString.\n   */\n  exception: string;\n}\n\n/**\n * @name File Transfer\n *\n * @description\n * This plugin allows you to upload and download files.\n *\n * @deprecated\n * This plugin has been deprecated in favor of XHR2\n * https://cordova.apache.org/blog/2017/10/18/from-filetransfer-to-xhr2.html\n *\n * @usage\n * ```typescript\n * import { FileTransfer, FileUploadOptions, FileTransferObject } from '@ionic-native/file-transfer';\n * import { File } from '@ionic-native/file';\n *\n * constructor(private transfer: FileTransfer, private file: File) { }\n *\n * ...\n *\n * const fileTransfer: FileTransferObject = this.transfer.create();\n *\n * // Upload a file:\n * fileTransfer.upload(..).then(..).catch(..);\n *\n * // Download a file:\n * fileTransfer.download(..).then(..).catch(..);\n *\n * // Abort active transfer:\n * fileTransfer.abort();\n *\n * // full example\n * upload() {\n *   let options: FileUploadOptions = {\n *      fileKey: 'file',\n *      fileName: 'name.jpg',\n *      headers: {}\n *      .....\n *   }\n *\n *   fileTransfer.upload('<file path>', '<api endpoint>', options)\n *    .then((data) => {\n *      // success\n *    }, (err) => {\n *      // error\n *    })\n * }\n *\n * download() {\n *   const url = 'http://www.example.com/file.pdf';\n *   fileTransfer.download(url, this.file.dataDirectory + 'file.pdf').then((entry) => {\n *     console.log('download complete: ' + entry.toURL());\n *   }, (error) => {\n *     // handle error\n *   });\n * }\n *\n * ```\n *\n * To store files in a different/publicly accessible directory, please refer to the following link\n * https://github.com/apache/cordova-plugin-file#where-to-store-files\n *\n * @interfaces\n * FileUploadOptions\n * FileUploadResult\n * FileTransferError\n * @classes\n * FileTransferObject\n */\n@Plugin({\n  pluginName: 'FileTransfer',\n  plugin: 'cordova-plugin-file-transfer',\n  pluginRef: 'FileTransfer',\n  repo: 'https://github.com/apache/cordova-plugin-file-transfer',\n  platforms: [\n    'Amazon Fire OS',\n    'Android',\n    'Browser',\n    'iOS',\n    'Ubuntu',\n    'Windows',\n    'Windows Phone'\n  ]\n})\n@Injectable()\nexport class FileTransfer extends IonicNativePlugin {\n  /**\n   * Error code rejected from upload with FileTransferError\n   * Defined in FileTransferError.\n   *      FILE_NOT_FOUND_ERR: 1   Return when file was not found\n   *      INVALID_URL_ERR: 2,     Return when url was invalid\n   *      CONNECTION_ERR: 3,      Return on connection error\n   *      ABORT_ERR: 4,           Return on aborting\n   *      NOT_MODIFIED_ERR: 5     Return on '304 Not Modified' HTTP response\n   * @enum {number}\n   */\n  FileTransferErrorCode = {\n    FILE_NOT_FOUND_ERR: 1,\n    INVALID_URL_ERR: 2,\n    CONNECTION_ERR: 3,\n    ABORT_ERR: 4,\n    NOT_MODIFIED_ERR: 5\n  };\n\n  /**\n   * Creates a new FileTransfer object\n   * @return {FileTransferObject}\n   */\n  create(): FileTransferObject {\n    return new FileTransferObject();\n  }\n}\n\n/**\n * @hidden\n */\n@Plugin({\n  plugin: 'cordova-plugin-file-transfer',\n  pluginName: 'FileTransfer'\n})\nexport class FileTransferObject {\n  private _objectInstance: any;\n\n  constructor() {\n    if (\n      checkAvailability(\n        FileTransfer.getPluginRef(),\n        null,\n        FileTransfer.getPluginName()\n      ) === true\n    ) {\n      this._objectInstance = new (FileTransfer.getPlugin())();\n    }\n  }\n\n  /**\n   * Sends a file to a server.\n   *\n   * @param {string} fileUrl  Filesystem URL representing the file on the device or a data URI. For backwards compatibility, this can also be the full path of the file on the device.\n   * @param {string} url  URL of the server to receive the file, as encoded by encodeURI().\n   * @param {FileUploadOptions} [options]  Optional parameters.\n   * @param {boolean} [trustAllHosts]  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful since Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n   * @returns {Promise<FileUploadResult>} Returns a Promise that resolves to a FileUploadResult and rejects with FileTransferError.\n   */\n  @CordovaInstance({\n    successIndex: 2,\n    errorIndex: 3\n  })\n  upload(\n    fileUrl: string,\n    url: string,\n    options?: FileUploadOptions,\n    trustAllHosts?: boolean\n  ): Promise<FileUploadResult> {\n    return;\n  }\n\n  /**\n   * Downloads a file from server.\n   *\n   * @param {string} source  URL of the server to download the file, as encoded by encodeURI().\n   * @param {string} target  Filesystem url representing the file on the device. For backwards compatibility, this can also be the full path of the file on the device.\n   * @param {boolean} [trustAllHosts]  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful because Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n   * @param {object} [Optional] parameters, currently only supports headers (such as Authorization (Basic Authentication), etc).\n   * @returns {Promise<any>} Returns a Promise that resolves to a FileEntry object.\n   */\n  @CordovaInstance({\n    successIndex: 2,\n    errorIndex: 3\n  })\n  download(\n    source: string,\n    target: string,\n    trustAllHosts?: boolean,\n    options?: { [s: string]: any }\n  ): Promise<any> {\n    return;\n  }\n\n  /**\n   * Registers a listener that gets called whenever a new chunk of data is transferred.\n   * @param {Function} listener Listener that takes a progress event.\n   */\n  @InstanceCheck({ sync: true })\n  onProgress(listener: (event: ProgressEvent) => any): void {\n    this._objectInstance.onprogress = listener;\n  }\n\n  /**\n   * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError\n   * object which has an error code of FileTransferError.ABORT_ERR.\n   */\n  @CordovaInstance({\n    sync: true\n  })\n  abort(): void {}\n}\n"]}